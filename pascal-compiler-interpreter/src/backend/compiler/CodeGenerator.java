package backend.compiler;

import backend.Backend;
import intermediate.ICode;
import intermediate.SymTab;
import intermediate.SymTabStack;
import messages.Message;
import messages.MessageType;

public class CodeGenerator extends Backend{

	/**
	* Process the intermediate code and the symbol table generated by the
	* parser to generate machine-language instructions.
	* @param iCode the intermediate code.
	* @param symTab the symbol table.
	* @throws Exception if an error occurred.
	*/
	@Override
	public void process(ICode iCode, SymTabStack symTabStack) throws Exception {
		long startTime = System.currentTimeMillis();
		float elapsedTime = (System.currentTimeMillis() - startTime)/1000.0f;
		int instructionCount = 0;
		
		// send the compiler summary message
		sendMessage(new Message(MessageType.COMPILER_SUMMARY, 
								new Number[] {instructionCount, elapsedTime}));
		
	}

}
