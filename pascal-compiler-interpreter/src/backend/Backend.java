package backend;

import intermediate.ICode;
import intermediate.SymTab;
import messages.Message;
import messages.MessageHandler;
import messages.MessageListener;
import messages.MessageProducer;

/**
 *	The framework class which represents the backend component
 */
public abstract class Backend implements MessageProducer {

	
	protected static MessageHandler messageHandler; // delegates messages to the listeners
	
	static { 
		messageHandler = new MessageHandler();
	}

	protected SymTab symTab;
	protected ICode iCode;
	
	/**
	* Process the intermediate code and the symbol table generated by the
	* parser. To be implemented by a compiler or an interpreter subclass.
	* @param iCode the intermediate code.
	* @param symTab the symbol table.
	* @throws Exception if an error occurred.
	*/
	public abstract void process(ICode iCode, SymTab symTab) throws Exception;

	/**
	 * Add backend message listener
	 */
	@Override
	public void addMessageListener(MessageListener listener) {
		messageHandler.addListener(listener);
	}
	
	/**
	 * Remove backend message listener
	 */
	@Override
	public void removeMessageListener(MessageListener listener) {
		messageHandler.removeListener(listener);
	}
	
	/**
	 * Notify the listeners after message is set
	 */
	public void sendMessage(Message message) {
		messageHandler.sendMessage(message);
	};
}
