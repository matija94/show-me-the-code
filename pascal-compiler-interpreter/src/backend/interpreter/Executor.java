package backend.interpreter;

import backend.Backend;
import backend.interpreter.executors.StatementExecutor;
import intermediate.ICode;
import intermediate.ICodeNode;
import intermediate.SymTab;
import intermediate.SymTabStack;
import messages.Message;
import messages.MessageType;

public class Executor extends Backend{

	protected static int executionCount;
	protected static RuntimeErrorHandler errorHandler;
	
	static {
		executionCount = 0;
		errorHandler = new RuntimeErrorHandler();
	}
	
	public Executor() {}
	

	/**
	 * Constructor for subclasses.
	 * @param parent
	 */
	public Executor(Executor parent) { 
		super();
	}
	
	/**
	 * Execute the source program by processing the intermediate code
	 * and the symbol table stack generated by the parser.
	 * 
	 * @param iCode
	 *            the intermediate code.
	 * @param symTab
	 *            the symbol table.
	 * @throws Exception
	 *             if an error occurred.
	 */
	public void process(ICode iCode, SymTabStack symTabStack) throws Exception {
		
		this.iCode = iCode;
		this.symTabStack = symTabStack;
		
		long startTime = System.currentTimeMillis();
		
		// get the root of the intermediate code and execute
		ICodeNode root = iCode.getRoot();
		StatementExecutor se = new StatementExecutor(this);
		se.execute(root);
		
		float elapsedTime = (System.currentTimeMillis() - startTime) / 1000f;
		int runtimeErrors = errorHandler.getErrorCount();
		
		// Send the interpreter summary message.
		sendMessage(new Message(MessageType.INTERPRETER_SUMMARY, 
								new Number[] { executionCount, runtimeErrors, elapsedTime }));
	}
}
